# Código 1: Importações e Carregamento de Dados
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve

# Carregar os dados
df = pd.read_csv('heart_disease.csv')

# Código 2: Análise Exploratória de Dados - Informações Básicas
print("Informações do Conjunto de Dados:")
print(df.info())

print("\nResumo Estatístico:")
print(df.describe())

# Código 3: Distribuição de Variáveis Categóricas
plt.figure(figsize=(20, 15))
categorical_cols = df.select_dtypes(include=['object']).columns

for i, col in enumerate(categorical_cols, 1):
    plt.subplot(3, 4, i)
    df[col].value_counts(normalize=True).plot(kind='bar')
    plt.title(f'Distribuição de {col}')
    plt.xticks(rotation=45, ha='right')

plt.tight_layout()
plt.show()

# Código 4: Distribuição de Doenças Cardíacas
plt.figure(figsize=(8, 6))
df['Heart Disease Status'].value_counts(normalize=True).plot(kind='pie', autopct='%1.1f%%')
plt.title('Distribuição de Doenças Cardíacas')
plt.show()

# Código 5: Análise de Correlação
plt.figure(figsize=(16, 12))
numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
correlation_matrix = df[numeric_cols].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, fmt='.2f', square=True)
plt.title('Matriz de Correlação')
plt.tight_layout()
plt.show()

# Código 6: Boxplots de Variáveis Numéricas por Status de Doença Cardíaca
numeric_features = ['Age', 'Blood Pressure', 'Cholesterol Level', 'BMI', 'Sleep Hours', 
                    'Triglyceride Level', 'Fasting Blood Sugar', 'CRP Level', 'Homocysteine Level']

plt.figure(figsize=(20, 15))
for i, feature in enumerate(numeric_features, 1):
    plt.subplot(3, 3, i)
    sns.boxplot(x='Heart Disease Status', y=feature, data=df)
    plt.title(f'{feature} por Status de Doença Cardíaca')

plt.tight_layout()
plt.show()

# Código 7: Preparação dos Dados para Modelo Preditivo
# Pré-processamento de dados
le = LabelEncoder()
X = df.copy()

# Codificar variáveis categóricas
categorical_cols = X.select_dtypes(include=['object']).columns
for col in categorical_cols:
    X[col] = le.fit_transform(X[col])

# Separar features e target
y = X['Heart Disease Status']
X = X.drop('Heart Disease Status', axis=1)

# Escalar features numéricas
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Dividir os dados
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Código 8: Treinamento do Modelo de Regressão Logística
# Treinar Regressão Logística
lr = LogisticRegression(random_state=42)
lr.fit(X_train, y_train)

# Previsões
y_pred = lr.predict(X_test)
y_pred_proba = lr.predict_proba(X_test)[:, 1]

# Relatório de Classificação
print("\nRelatório de Classificação:")
print(classification_report(y_test, y_pred))

# Matriz de Confusão
plt.figure(figsize=(8, 6))
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Matriz de Confusão')
plt.ylabel('Valor Real')
plt.xlabel('Valor Previsto')
plt.show()

# Curva ROC
plt.figure(figsize=(8, 6))
fpr, tpr, _ = roc_curve(y_test, y_pred_proba)
plt.plot(fpr, tpr, label=f'ROC curve (AUC = {roc_auc_score(y_test, y_pred_proba):.2f})')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('Taxa de Falsos Positivos')
plt.ylabel('Taxa de Verdadeiros Positivos')
plt.title('Curva ROC')
plt.legend(loc="lower right")
plt.show()

# Código 9: Importância das Features
feature_importance = pd.DataFrame({
    'feature': X.columns,
    'importance': np.abs(lr.coef_[0])
})
feature_importance = feature_importance.sort_values('importance', ascending=False)

plt.figure(figsize=(12, 8))
sns.barplot(x='importance', y='feature', data=feature_importance)
plt.title('Importância das Features para Prever Doenças Cardíacas')
plt.tight_layout()
plt.show()

# Imprimir as 10 features mais importantes
print("\n10 Features Mais Importantes:")
print(feature_importance.head(10))